
from imp import reload
import PySimpleGUI as sg
import esptool
import os
import requests
import json 
import serial.tools.list_ports
import base64
import io
from PIL import Image


sg.theme('Dark')   # Add a touch of color
# All the stuff inside your window.
o1 = b''
g2 = b''
g1 = b''
r1 = b''
   
section_caminho = [[sg.Text('IP',size=(10,0),justification='center'), sg.InputText(size=(22,0),key='IPLabel'),sg.Text(':'), sg.InputText(size=(5,0),key='portaLabel',default_text='80'),sg.Text('/'), sg.InputText(size=(30,0),key='caminhoLabel')]]
section_firmware = [[sg.Text('Firmware',size=(10,0),justification='center'), sg.InputText(size=(60,0),key='firmwareLabel'),sg.FileBrowse(target='firmwareLabel',button_color=('grey'))],]
section_ota = [[sg.Text('OTAdata',size=(10,0),justification='center'), sg.InputText(size=(60,0),key='OTAdataLabel'),sg.FileBrowse(target='OTAdataLabel',button_color=('grey'))]]
section_nvs = [[sg.Text('nvs',size=(10,0),justification='center'), sg.InputText(size=(60,0),key='nvsLabel'),sg.FileBrowse(target='nvsLabel',button_color=('grey'))]]

def collapse(layout, key, visible):
    return sg.pin(sg.Column(layout, key=key, visible=visible, pad=(0,0)))


def verificar_portas():
    portas = ['Auto']
    ports = serial.tools.list_ports.comports(include_links=False)
    for port in ports :
        portas.append(port[0])
    return portas

DEF_BUTTON_COLOR = ('white', 'black')


def openBase64Img(path):
    file = open(path,'rb')
    img = file.read()
    file.close()
    return img
'''
frame_layout = [[sg.Multiline("", size=(80, 20), autoscroll=True,
    reroute_stdout=True, reroute_stderr=True, key='-OUTPUT-')]]

'''

portas_ativas =['Auto']
             
layout1 = [ [sg.Text('Settings',size=(1000,0),justification='center',font=('Helvitica',18))],
            [sg.Text('Com',size=(5,0),justification='center',pad=((8,6),(2,2))),
             sg.Button(key='reloadLabel',enable_events=True,image_data=(base64.b64decode(openBase64Img('configsetup\\img\\reload.bin')))), sg.InputCombo(verificar_portas(),size=(10,0),default_value='Auto',key='comLabel'),sg.Text('Baudrate',size=(10,0),justification='center'), sg.InputCombo(['115200','256000','512000'],size=(10,0),key='uploadSpeedLabel',default_value='115200'),sg.Text('MCU',size=(10,0),justification='center'), sg.InputCombo(['ESP32','ESP8266'],size=(10,0),key='MCULabel')],        
            [sg.Text('Flash mode',size=(10,0),justification='center'), sg.InputCombo(['dio','dout','qio','qout'],size=(10,0),key='flashModeLabel'),sg.Text('Flash freq',size=(10,0),justification='center'), sg.InputCombo(['40m','80m'],size=(10,0),key='flashFreqLabel'),sg.Text('Flash size',size=(10,0),justification='center'), sg.InputCombo(['2MB','4MB','8MB','16MB'],size=(10,0),key='flashSizeLabel')],           
            [sg.Text('_________________________________________________________________________',size=(1000,0),justification='center')],
            [sg.Text('Upload',size=(1000,0),justification='center',font=('Helvitica',18))],
            [sg.Text('Tipo',size=(10,0),justification='center'), sg.InputCombo(['Fisico','Nuvem'],default_value='Fisico',size=(10,0),key='tipoLabel'),sg.Checkbox('OTA',key='OTAchkLabel'),sg.Checkbox('nvs',key='nvschkLabel'),sg.Text('Framework',size=(10,0),justification='center'), sg.InputCombo(['Arduino','IDF'],size=(10,0),key='frameworkLabel')],
            [collapse(section_firmware,'sec_firmware',False)],
            [collapse(section_ota,'sec_ota',False)],
            [collapse(section_nvs,'sec_nvs',False)],
            [collapse(section_caminho,'sec_caminho',True)],
            [sg.Text('Perfil',size=(10,0),justification='center'), sg.InputCombo(['MANUAL'], size=(47,0),key='perfilLabel',default_value='ESP32WROVER'),sg.Button('Save', image_data=g2, image_subsample=2, button_color=('black', sg.theme_background_color()), border_width=0, font='Any 15'),sg.Button('Load', image_data=g2, image_subsample=2, button_color=('black', sg.theme_background_color()), border_width=0, font='Any 15')],
            [sg.Button('Write', image_data=g2, button_color=('black', sg.theme_background_color()), border_width=0, font='Any 15',pad=((215,25),(10,10))),
                sg.Button('Erase', image_data=o1, button_color=('black', sg.theme_background_color()), border_width=0, font='Any 15',pad=((25,200),(10,10)))],            
            #[sg.Frame("Output console", frame_layout,pad=20)],
            ]



def GUI():
    global perfil
    perfil = 0  
    window = sg.Window('Esptool GUI - by Italo Barros', layout1,font=('Helvitica',12),size=(1000,500),margins=(100,20),relative_location=(0,-150),icon=base64.b64decode(openBase64Img('configsetup\\img\\logo_espressif.bin')))
    firstTime =True
    while True:
        event, values = window.read(timeout=100)
        if firstTime ==True:
            listPerfil(values,window)
            firstTime = False
        if event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            break
        if event == 'reloadLabel':
            reloadCom(window)
            listPerfil(values,window)
        if event == 'Load':
            readPerfil(values,window)
        savePerfil(values,event) 
        tipoTest(values,window)
        if event == 'Write': # if user closes window or clicks cancel
            writeMCU(values,window)
        elif event == 'Erase': # if user closes window or clicks cancel
            clearMCU(values)            
    window.close()

def writeMCU(values,window):
    try:
        if(values['tipoLabel'] == 'Nuvem'):
            try:
                print("baixando da nuvem...")
                print('GET requisition')
                response = requests.get(url=(values['IPLabel']+':'+values['portaLabel']+'/'+values['caminhoLabel']))  
                firmwareData = open("configsetup\\DataFirmware.bin", "wb")
                firmwareData.write(response.content)
                firmwareData.flush()
                print("baixou!")                    
                valuesNuvem = values
                valuesNuvem['firmwareLabel'] = 'configsetup\\DataFirmware.bin'
                activeEsptool(valuesNuvem,window)
            except:
                print("ERROR: Não baixou da nuvem!")
        else:
            activeEsptool(values,window)
    except:
        print("ERROR: NÃO FOI POSSIVEL GRAVAR!")

def activeEsptool(values,window):
    try:
        if(values['frameworkLabel'] == 'Arduino'):
            print("Gravando framework Arduino...")
            esptoolTypeMCU(values,window)                  
        elif(values['frameworkLabel'] == 'IDF'):
            print("Gravando framework ESP-IDF...")
            esptoolTypeMCU(values,window)
    except:
        print("ERROR: Não gravou!")

def esptoolTypeMCU(values,window):
    if(values['MCULabel'] == 'ESP8266'):
        if(values['comLabel'] =='Auto'):
            writeFlash = ['--baud', values['uploadSpeedLabel'],'--chip','ESP8266' ,'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x0000', values['firmwareLabel']]                                        
        else:
            writeFlash = ['--baud', values['uploadSpeedLabel'],'-p',values['comLabel'],'--chip','ESP8266' ,'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x0000', values['firmwareLabel']]                                  
        closeSerial(values)
    elif(values['MCULabel']== 'ESP32'):        
        if(values['comLabel'] =='Auto'):
            writeFlash = ['--baud', values['uploadSpeedLabel'],'--before','default_reset','--after','hard_reset','--chip','ESP32', 'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x1000',str(os.getcwd())+'\\configsetup\\bootloaderESP32\\bootloader_'+values['flashModeLabel']+'_'+values['flashFreqLabel']+'.bin', '0x10000', values['firmwareLabel']]                                                   
        else:
            writeFlash = ['--baud', values['uploadSpeedLabel'],'-p',values['comLabel'],'--before','default_reset','--after','hard_reset','--chip','ESP32', 'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x1000',str(os.getcwd())+'\\configsetup\\bootloaderESP32\\bootloader_'+values['flashModeLabel']+'_'+values['flashFreqLabel']+'.bin', '0x10000', values['firmwareLabel']]                                                                 
        closeSerial(values)
    else:
        if(values['comLabel'] =='Auto'):
            writeFlash = ['--baud', values['uploadSpeedLabel'],'--chip','ESP32', 'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x1000',str(os.getcwd())+'\\configsetup\\bootloaderESP32\\bootloader_'+values['flashModeLabel']+'_'+values['flashFreqLabel']+'.bin', '0x10000', values['firmwareLabel']]                                                     
        else:
            writeFlash = ['--baud', values['uploadSpeedLabel'],'-p',values['comLabel'],'--chip','ESP32', 'write_flash','--flash_mode', values['flashModeLabel'],'--flash_freq',values['flashFreqLabel'],'--flash_size',values['flashSizeLabel'],'0x1000',str(os.getcwd())+'\\configsetup\\bootloaderESP32\\bootloader_'+values['flashModeLabel']+'_'+values['flashFreqLabel']+'.bin', '0x10000', values['firmwareLabel']]                                                         
        closeSerial(values) 
    if(values['OTAchkLabel'] == True):
        writeFlash += ['0xe000',values['OTAdataLabel']]
    if(values['nvschkLabel'] == True):
        writeFlash += ['0x8000', values['nvsLabel']]     
    esptool.main(writeFlash)
    sg.Popup('Firmware Carregado!')
    
def closeSerial(values):
    ser = serial.Serial()
    ser.port = values['comLabel']
    ser.close() 

def clearMCU(values):
    try:
        if(values['comLabel'] =='Auto'):
            eraseFlash = ['--baud', values['uploadSpeedLabel'], 'erase_flash']
        else:              
            eraseFlash = ['--baud', values['uploadSpeedLabel'],'-p',values['comLabel'], 'erase_flash']           
        esptool.main(eraseFlash)
        closeSerial(values)
        sg.Popup('Flash Limpa')
    except:
        print("ERROR: NÃO FOI POSSIVEL LIMPAR!")   


def tipoTest(values,window):
    if(values['tipoLabel'] == 'Fisico'):
        window['sec_firmware'].update(visible=True)
        window['sec_caminho'].update(visible=False)
    elif(values['tipoLabel'] == 'Nuvem'):
        window['sec_firmware'].update(visible=False)
        window['sec_caminho'].update(visible=True)
        
    if(values['frameworkLabel'] == 'Arduino'):    
        window['sec_ota'].update(visible=False)
        window['OTAdataLabel'].Update('configsetup/frameworkArduinoESP32/boot_app0.bin')  
        if values['nvschkLabel'] == True:
            window['sec_nvs'].update(visible=True)
        else:
            window['sec_nvs'].update(visible=False)
    if(values['frameworkLabel'] == 'IDF'):    
        if values['OTAchkLabel'] == True:
            window['sec_ota'].update(visible=True)
        else:
            window['sec_ota'].update(visible=False)  
        if values['nvschkLabel'] == True:
            window['sec_nvs'].update(visible=True)
        else:
            window['sec_nvs'].update(visible=False)   
         
def savePerfil(values,event):
    if(event == 'Save'):
        try:
            print("Salvando Perfil"+values['perfilLabel'])
            json_object = json.dumps(values)
            jsonPerfil = open('configsetup\\perfil\\'+values['perfilLabel'], "w")
            jsonPerfil.write(json_object)
            jsonPerfil.flush()
        except:
            print("Não foi possivel salvar!")
def readPerfil(values,window):
    try:
        jsonPerfil = open('configsetup\\perfil\\'+values['perfilLabel'], "r")
        json_object = json.load(jsonPerfil)
        param = ['uploadSpeedLabel','flashModeLabel','flashFreqLabel','flashSizeLabel','tipoLabel','firmwareLabel','IPLabel','portaLabel','caminhoLabel','MCULabel','OTAdataLabel','OTAchkLabel','nvsLabel','nvschkLabel','frameworkLabel']         
        for a in param:
            window[a].Update(json_object[a])
    except:
        print("Não foi possivel ler!")

def listPerfil(values,window):
    try:
        namePerfil =['MANUAL']
        for c in os.listdir('configsetup\\perfil'):
            namePerfil.append(c)
        window['perfilLabel'].Update(value='',values=namePerfil)  
    except:
        print("ERROR: perfiL não carregado!")

def reloadCom(window):
    window['comLabel'].Update(value='',values=verificar_portas())
   
                
if __name__ == '__main__':
    GUI()
    print('Exiting Program')